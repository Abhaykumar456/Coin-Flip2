[{"/Users/joshcodrescu/Desktop/coin-flip/client/src/index.js":"1","/Users/joshcodrescu/Desktop/coin-flip/client/src/reportWebVitals.js":"2","/Users/joshcodrescu/Desktop/coin-flip/client/src/Router.js":"3","/Users/joshcodrescu/Desktop/coin-flip/client/src/App.js":"4","/Users/joshcodrescu/Desktop/coin-flip/client/src/Flip.js":"5","/Users/joshcodrescu/Desktop/coin-flip/client/src/Hamburger.js":"6","/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js":"7","/Users/joshcodrescu/Desktop/coin-flip/client/src/OverlayMenu.js":"8","/Users/joshcodrescu/Desktop/coin-flip/client/src/Player.js":"9","/Users/joshcodrescu/Desktop/coin-flip/client/src/PlayOptions.js":"10","/Users/joshcodrescu/Desktop/coin-flip/client/src/Header.js":"11","/Users/joshcodrescu/Desktop/coin-flip/client/src/CoinFlip.js":"12","/Users/joshcodrescu/Desktop/coin-flip/client/src/CoinLogo.js":"13","/Users/joshcodrescu/Desktop/coin-flip/client/src/QuitButton.js":"14","/Users/joshcodrescu/Desktop/coin-flip/client/src/WaitingPlayers.js":"15"},{"size":563,"mtime":1651095532855,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1648588211033,"results":"18","hashOfConfig":"17"},{"size":642,"mtime":1651196187687,"results":"19","hashOfConfig":"17"},{"size":713,"mtime":1651092897948,"results":"20","hashOfConfig":"17"},{"size":4501,"mtime":1651197970554,"results":"21","hashOfConfig":"17"},{"size":303,"mtime":1649209111801,"results":"22","hashOfConfig":"17"},{"size":11007,"mtime":1651199714239,"results":"23","hashOfConfig":"17"},{"size":1257,"mtime":1649212960706,"results":"24","hashOfConfig":"17"},{"size":758,"mtime":1649714223042,"results":"25","hashOfConfig":"17"},{"size":593,"mtime":1650243608862,"results":"26","hashOfConfig":"17"},{"size":626,"mtime":1649210271644,"results":"27","hashOfConfig":"17"},{"size":409,"mtime":1650323127592,"results":"28","hashOfConfig":"17"},{"size":254,"mtime":1649204435502,"results":"29","hashOfConfig":"17"},{"size":313,"mtime":1649206060793,"results":"30","hashOfConfig":"17"},{"size":1638,"mtime":1650928293253,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"13eu45g",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joshcodrescu/Desktop/coin-flip/client/src/index.js",[],[],["81","82"],"/Users/joshcodrescu/Desktop/coin-flip/client/src/reportWebVitals.js",[],[],["83","84"],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Router.js",[],[],["85","86"],"/Users/joshcodrescu/Desktop/coin-flip/client/src/App.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Flip.js",["87","88","89"],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Hamburger.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Game.js",["90"],[],"import CoinFlip from \"./CoinFlip\";\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport coinReady from './coin-back-ready.svg';\nimport coinLoading from './coin-back-loading.svg';\nimport Player from './Player';\nimport './Game.css';\nimport Confetti from 'react-confetti';\nimport { Navigate } from \"react-router-dom\";\n\n/*\n\np1: load in. fetch(/addPlayer, gameData)\n                .then(  () => fetch(/otherPlayerData, gameData)\n                                .then(  res => res.json()   )\n                                .then(  (result) => {\n                                    if (result.name === null) {\n                                        setTimeout();\n                                    }\n                                    else {\n                                        fetch(/decideWinner, gameData);\n                                    }\n                                        }) )\n\n*/\n\nfunction Game() {\n    const location = useLocation();\n    const [gameData, changeGameData] = useState(location.state !== null ? {\n                                                    'p1': {'name': location.state.name, 'side': location.state.side, 'wallet': location.state.wallet}, \n                                                    'p2': {'name': null, 'side': null, 'wallet': null}, \n                                                    'bet': location.state.bet,\n                                                    'winningSide': null,\n                                                    'gameID': null\n                                                    }\n                                                    : null\n                                                );\n    const [gameFinished, setGameFinished] = useState(false);\n\n    async function loadGame() {\n        console.log(\"loading...\")\n    }\n\n    // async function loadGame() {\n    //     let requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({\"gameID\": gameData.gameID})\n    //     };\n    //     let tempGameData = null;\n    //     fetch('/otherPlayerData', requestOptions)\n    //             .then(otherPlayerData => otherPlayerData.json())\n    //             .then((otherPlayerData) => {\n    //                 if (otherPlayerData.name === null) { // if no other player has joined recall this function in 3 seconds\n    //                     setTimeout(loadGame, 3000);\n    //                 }\n    //                 else { // other player was found so begin game\n    //                     setTimeout(() => {setGameFinished(true)}, 6000);\n    //                     let requestOptions = {\n    //                         method: 'POST',\n    //                         headers: { 'Content-Type': 'application/json' },\n    //                         body: JSON.stringify({'gameID': gameData.gameID})\n    //                     };\n    //                     fetch('/getWinner', requestOptions) // get winner returns the winner of the game\n    //                         .then(winningSide => winningSide.json())\n    //                         .then((winningSide) => {\n    //                             tempGameData = {\n    //                                 'p1': {'name': gameData.p1.name, 'side': gameData.p1.side, 'wallet': gameData.p1.wallet}, \n    //                                 'p2': {'name': otherPlayerData.name, 'side': otherPlayerData.side, 'wallet': otherPlayerData.wallet}, \n    //                                 'bet': gameData.bet,\n    //                                 'winningSide': winningSide.side,\n    //                                 'gameID': gameData.gameID\n    //                             };\n    //                         })\n    //                         .then(() => {\n    //                             fetch('/endGame', requestOptions); // end game removes the game from the servers database\n    //                         })\n    //                         .then(() => {\n    //                             changeGameData(tempGameData);\n    //                         })\n    //                         .catch(err => {\n    //                             console.log(err);\n    //                             window.location.href = \"/\";\n    //                         })\n                        \n    //                 }\n    //             })\n    //             .catch(err => {\n    //                 console.log(err);\n    //                 window.location.href = \"/\";\n    //             })\n    // }\n    console.log(\"here\")\n\n    useEffect(() => {\n        if (gameData === null) {\n            console.log(\"here somehow\")\n            return; // this is to not allow people onto this page if they haven't gone through the 'flip' page\n        }\n        if (gameData.gameID === null) {\n            let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({name: gameData.p1.name})\n            };\n            fetch('/getPlayerGame', requestOptions)\n                .then(result => result.json())\n                .then(playerGame => {\n                    if (playerGame.error) {\n                        console.log(playerGame.error)\n                        console.log(\"here baby\")\n                        changeGameData(null);\n                    }\n                    console.log(playerGame)\n                    if (playerGame.found) { // .found means the player exists\n                        if (playerGame.gameID) { // if .gameID is not null then the game already exists - don't create a new one\n                            changeGameData({\n                                'p1': {'name': gameData.name, 'side': gameData.side, 'wallet': gameData.wallet}, \n                                'p2': {'name': playerGame.p2.name, 'side': playerGame.p2.side, 'wallet': playerGame.p2.wallet}, \n                                'bet': gameData.bet,\n                                'winningSide': playerGame.winner,\n                                'gameID': playerGame.gameID\n                            });\n                            return \"game exists\";\n                        }\n                        else {\n                            console.log(\"right here??\")\n                            return \"game doesn't exist\";\n                        }\n                    }\n                    else { // the player doesnt exist - so this page was reached without going through 'flip' page (illegally)\n                        return \"player doesn't exist\";\n                    }\n                })\n                .then(async (gameState) => {\n                    if (gameState === \"game exists\") { // player exists and is already in a game - this was probably an accidental page refresh\n                        return null; // all state changes have already been made. This function will reload and schedule poll or show results\n                    }\n                    else if (gameState === \"game doesn't exist\") { // player exists, but has not joined a game - so join one here\n                        let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({\"name\": gameData.p1.name})\n                        };\n                        await fetch('/joinGame', requestOptions)\n                            .then(result => result.json())\n                            .then(result => {\n                                console.log(\"how did i make it this far\")\n                                // if (!result) return null;\n                                if (result.error) {\n                                    console.log(result.error)\n                                    console.log(\"how many error things doi have\")\n                                    changeGameData(null);\n                                }\n                                console.log(result);\n                                // changeGameData({\n                                //     'p1': {'name': gameData.name, 'side': gameData.side, 'wallet': gameData.wallet}, \n                                //     'p2': {'name': result.p2.name, 'side': result.p2.side, 'wallet': result.p2.wallet}, \n                                //     'bet': gameData.bet,\n                                //     'winningSide': result.winner,\n                                //     'gameID': gameData.gameID\n                                // });\n                            }) // join this player into a game\n                    }\n                    else { // this will cause a recall of this function while will force the user to be routed back to home\n                        console.log(\"just kidding im here\")\n                        changeGameData(null);\n                        return null;\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                    console.log(\"ok last one\")\n                    changeGameData(null);\n                    return null;\n                })\n        }\n        else if (gameData.winner === null) { \n            setTimeout(loadGame, 3000); // this client is p1, so schedule the polling for p2 to join\n        }\n        else if (gameData.winner !== null) {\n            setTimeout(() => {setGameFinished(true)}, 6000);\n        }\n    }, []);\n\n    return (\n        (gameData ?\n        <div id=\"Game\">\n            <div className=\"GamePrize\">\n                <div className=\"GamePrizeText\">Cash Prize:</div>\n                <div className=\"GamePrizeAmount\">{gameData.bet * 2}</div>\n            </div>\n            <div id=\"GameMain\">\n                <Player name={gameData.p1.name} side={gameData.p1.side} result={gameFinished ? (gameData.winningSide === gameData.p1.side ? '-winner' : '') : ''}/>\n                <CoinFlip animation={gameFinished ? 'done' : (gameData.winningSide === null ? 'loading' : 'ready')} winningSide={gameData.winningSide} image={gameData.winningSide === null ? coinLoading : coinReady}/>\n                {gameData.winningSide === null ? <div style={{width: '300px', height: '150px'}}></div> : <Player name={gameData.p2.name} side={gameData.p2.side} wallet={gameData.p2.wallet} result={gameFinished ? (gameData.winningSide === gameData.p2.side ? '-winner' : '') : ''}/>}\n            </div>\n            {gameFinished ? <Confetti confettiSource={{ x: (gameData.winningSide === gameData.p1.side ? 0 : window.innerWidth - 300), y: 0, w: 300, h: 0 }}/> : null}\n            {gameFinished ?  <div className=\"GameOverOptions\">\n                                    <a className=\"GameOverOption\" href=\"/flip\">Play Again</a>\n                                    <a className=\"GameOverOption\" href=\"/\">Return to Home</a>\n                                </div> \n                        : null\n            }\n        </div>\n        : <Navigate to=\"/\" />)\n    );\n}\n\nexport default Game;","/Users/joshcodrescu/Desktop/coin-flip/client/src/OverlayMenu.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Player.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/PlayOptions.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/Header.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/CoinFlip.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/CoinLogo.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/QuitButton.js",[],[],"/Users/joshcodrescu/Desktop/coin-flip/client/src/WaitingPlayers.js",[],[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"91","replacedBy":"97"},{"ruleId":"93","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":12,"column":20,"nodeType":"101","messageId":"102","endLine":12,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":32,"column":36,"nodeType":"106","messageId":"107","endLine":32,"endColumn":38},{"ruleId":"108","severity":1,"message":"109","line":184,"column":8,"nodeType":"110","endLine":184,"endColumn":10,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],["112"],["113"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'changeWallet' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameData'. Either include it or remove the dependency array.","ArrayExpression",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [gameData]",{"range":"117","text":"118"},[9454,9456],"[gameData]"]